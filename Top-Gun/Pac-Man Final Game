int radius = 15; //size of Pac-Man
int direction = 1;
int direction2 = 0;

float x = 840; //Where Pac-Man starts on the X-Axis
float y = 525; //Where Pac-Man starts on the Y-Axis

ArrayList poop = new ArrayList();

void setup() {
size(1680, 1050); //size of the screen For Mac Desktops
ellipseMode(RADIUS); 
for (int i=0; i<1000; i++) { //Amount of dots on the screen
Particle P = new Particle((int)random(width), (int)random(height));
poop.add(P);
}
}

void draw() {
background(0);
fill (246, 255, 0); //Color of the Pac-Man
smooth ();
noStroke();
render();

for (int i=0;i<poop.size();i++) {
Particle Pn = (Particle) poop.get(i);
Pn.display();
if (dist(x, y, Pn.x, Pn.y)<radius) {
poop.remove(i);
radius=radius+1;
}
}
}

class Particle {
int x, y;
Particle(int x, int y) {
this.x = x;
this.y = y;
}
void display() {
noStroke();
fill(226,36,36); //dot color
ellipse(x, y, 10, 10); //dot size and shape
}
}

void keyPressed() {
if (key == CODED) {
if (keyCode == LEFT) { //If LEFT arrow is pressed then Pac-Man moves left.
x = x - 15;
direction = -1;
direction2 = 0;
}
else if (keyCode == RIGHT) { //If RIGHT arrow is pressed then Pac-Man moves right.

x = x + 15;
direction = 1;
direction2 = 0;
}
else if (keyCode == UP) { //If UP arrow is pressed then Pac-Man moves up.
y = y - 15;
direction = 0;
direction2 = -1;
}
else if (keyCode == DOWN) { //If DOWN arrow is pressed then Pac-Man moves down.
y = y + 15;
direction = 0;
direction2 = 1;
}
}
}

void render() {
for ( int i=-1; i < 2; i++) {
for ( int j=-1; j < 2; j++) {
pushMatrix();
translate(x + (i * width), y + (j*height)); //changes amount of Pac-Man
if ( direction == -1) { 
rotate(PI);
}
if ( direction2 == 1) { 
rotate(HALF_PI);
}
if ( direction2 == -1) { 
rotate( PI + HALF_PI );
}
arc(10, 10, radius, radius, map((millis() % 500), 0, 500, 0, 0.52), map((millis() % 500), 0, 500, TWO_PI, 5.76) );
popMatrix();
// mouth movement and distance traveled
}
}
}
